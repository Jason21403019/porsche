---
interface Props {
  class?: string
  introSection?: {
    title: string
    title1: string
    title2: string
    description: string
    image: string
  }
  sections?: Array<{
    id: string
    year?: string
    years?: string[]
    activeYear?: string
    title: string | string[]
    description: string[]
    image?: string
    imageSrc?: string
    gradient?: {
      from: string
      to: string
    }
    backgroundColor?: string
  }>
}

const {
  class: className = '',
  introSection = {
    title: 'Green',
    title1: 'Energy',
    title2: 'Track',
    description: 'the future is limitless',
    image: '../../public/img/historybg.jpg',
  },
  sections = [],
} = Astro.props
---

<div class={`horizontal-scroll__wrapper ${className}`}>
  <div class="horizontal-scroll__container">
    <div class="horizontal-scroll__sections">
      <!-- 介紹頁面 -->
      <div class="section section--intro">
        <div class="intro__image">
          <img src={introSection.image} alt="Intro" />
        </div>
        <div class="intro__content">
          <h1>{introSection.title}</h1>
          <h1>{introSection.title1}</h1>
          <h1>{introSection.title2}</h1>
          <p>{introSection.description}</p>
        </div>
      </div>

      <!-- 年份內容頁面 -->
      {
        sections.map((section) => (
          <div
            id={section.id}
            class="section section--content"
            data-year={
              section.activeYear ||
              section.year ||
              (section.years && section.years[0])
            }
            style={
              section.gradient
                ? `background: linear-gradient(to right, ${section.gradient.from}, ${section.gradient.to})`
                : section.backgroundColor
                  ? `background-color: ${section.backgroundColor}`
                  : ''
            }>
            <div class="year__column">
              <div class="year__container">
                {section.years &&
                  section.years.map((year) => (
                    <div
                      class={`year__display ${
                        year === section.activeYear
                          ? 'year__display--active'
                          : ''
                      }`}>
                      {year}
                    </div>
                  ))}
              </div>
            </div>
            <div class="content__column">
              <div class="title-container">
                {Array.isArray(section.title) ? (
                  section.title.map((title) => <h2>{title}</h2>)
                ) : (
                  <h2>{section.title}</h2>
                )}
              </div>
              <div class="description-container">
                {section.description.map((desc) => (
                  <p set:html={desc} />
                ))}
              </div>
              <div class="content__image">
                <img
                  src={section.image || section.imageSrc}
                  alt={section.title}
                />
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<style lang="scss">
  .horizontal-scroll {
    &__wrapper {
      position: relative;
      width: 100%;
      overflow: hidden;
    }

    &__container {
      height: 100vh;
      width: 100%;
      overflow: hidden;
    }

    &__sections {
      display: flex;
      height: 100vh;
      width: calc(100vw * var(--section-count, 5));
      will-change: transform;
    }
  }

  .section {
    position: relative;
    width: 100vw;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-shrink: 0;

    &--intro {
      display: grid;
      grid-template-columns: 1fr 1fr;
    }

    &--content {
      display: grid;
      grid-template-columns: 1fr 1fr;
    }
  }

  .intro {
    &__content {
      display: flex;
      flex-direction: column;
      justify-content: center;
      width: 100%;
      height: 100%;
      box-shadow: -220px -30px 120px rgba(21, 21, 21, 1);
      background: linear-gradient(
        to right,
        rgba(21, 21, 21, 1) 50%,
        #a88b49 100%
      );
      h1 {
        color: #fff;
        font-size: 80px;
        padding-left: 20rem;
        margin: 5rem 0;
      }

      p {
        color: #fff;
        font-size: 36px;
        padding-left: 20rem;
      }
    }

    &__image {
      width: 100%;
      height: 100%;
      overflow: hidden;
      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: -560px;
        display: block;
      }
    }
  }

  .year {
    &__column {
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 2rem;
    }

    &__container {
      display: flex;
      flex-direction: column;
      gap: 10rem;
    }

    &__display {
      font-size: 2.5rem;
      font-weight: bold;
      transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
      opacity: 0.5;

      &--active {
        font-size: 6rem;
        opacity: 1;
        color: #fff;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
      }
    }
  }

  .content {
    &__column {
      padding: 2rem;
      display: flex;
      flex-direction: column;
      gap: 2rem;
      .title-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        h2 {
          font-size: 2.5rem;
          margin-bottom: 1rem;
        }
      }

      .description-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;

        p {
          font-size: 1.2rem;
          line-height: 1.6;
        }
      }
    }

    &__image {
      width: 100%;
      height: 400px;
      overflow: hidden;

      img {
        width: 80%;
        height: 100%;
        object-fit: contain;
      }
    }
  }
</style>

<script>
  // 直接導入已安裝的 GSAP 和 ScrollTrigger
  import { gsap } from 'gsap'
  import { ScrollTrigger } from 'gsap/ScrollTrigger'

  // 註冊插件
  gsap.registerPlugin(ScrollTrigger)

  // 等待 DOM 完全加載
  document.addEventListener('DOMContentLoaded', () => {
    initHorizontalScroll()
  })

  function initHorizontalScroll() {
    const wrapper = document.querySelector('.horizontal-scroll__wrapper')
    if (!wrapper) return

    const container = wrapper.querySelector('.horizontal-scroll__sections')
    const sections = wrapper.querySelectorAll('.section')

    // 设置 CSS 变量
    container.style.setProperty('--section-count', sections.length)

    // 创建橫向滾動動畫
    gsap.to(container, {
      x: () => -(container.scrollWidth - window.innerWidth),
      ease: 'none',
      scrollTrigger: {
        trigger: wrapper,
        start: 'top top',
        end: () => `+=${container.scrollWidth - window.innerWidth}`,
        pin: true,
        anticipatePin: 1,
        scrub: 1,
        invalidateOnRefresh: true,
        onUpdate: (self) => {
          const progress = self.progress
          const direction = self.direction // 1 表示向前滾動，-1 表示向後滾動
          const totalSections = sections.length

          sections.forEach((section, index) => {
            if (section.classList.contains('section--intro')) return

            const yearDisplays = section.querySelectorAll('.year__display')
            if (yearDisplays.length === 0) return

            // 計算每個 section 的位置
            const sectionStart = (index - 1) / (totalSections - 1)
            const sectionEnd = index / (totalSections - 1)

            // 判斷當前 section 是否在視圖中（考慮滾動方向）
            const isInView = progress >= sectionStart && progress < sectionEnd

            if (isInView) {
              // 找到該 section 的 activeYear
              const activeYear = section.dataset.year

              yearDisplays.forEach((display) => {
                // 判斷是否為當前年份
                if (display.textContent.trim() === activeYear) {
                  // 無論滾動方向如何，只要在視圖中就添加 active 類
                  display.classList.add('year__display--active')
                } else {
                  display.classList.remove('year__display--active')
                }
              })
            } else {
              // 如果不在視圖中，移除所有激活狀態
              yearDisplays.forEach((display) => {
                display.classList.remove('year__display--active')
              })
            }
          })
        },
      },
    })

    // 窗口大小调整时重新计算
    window.addEventListener('resize', () => {
      ScrollTrigger.refresh()
    })
  }
</script>
