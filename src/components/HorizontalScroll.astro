---
// src/components/HorizontalScroll.astro
interface Props {
  class?: string
  introSection?: {
    title: string
    description: string
    image: string
  }
  sections?: Array<{
    id: string
    year: string
    title: string
    description: string
    image: string
    gradient?: {
      from: string
      to: string
    }
    backgroundColor?: string
  }>
}

const {
  class: className = '',
  introSection = {
    title: '保時捷歷史',
    description: '探索保時捷的輝煌歷程',
    image: '../../public/img/historybg.jpg',
  },
  sections = [
    {
      id: 'section-1',
      year: '2020',
      backgroundColor: 'linear-gradient(to right, #f87171, #fbbf24)',
      content: '2020年事件',
    },
    {
      id: 'section-2',
      year: '2021',
      backgroundColor: '#fbbf24',
      content: '2021年事件',
    },
    {
      id: 'section-3',
      year: '2022',
      backgroundColor: '#34d399',
      content: '2022年事件',
    },
    {
      id: 'section-4',
      year: '2023',
      backgroundColor: '#60a5fa',
      content: '2023年事件',
    },
    {
      id: 'section-5',
      year: '2024',
      backgroundColor: '#a78bfa',
      content: '2024年事件',
    },
  ],
} = Astro.props
---

<div class={`horizontal-scroll__wrapper ${className}`}>
  <div class="horizontal-scroll__container">
    <div class="horizontal-scroll__sections">
      <!-- 介紹頁面 -->
      <div class="section section--intro">
        <div class="intro__image">
          <img src={introSection.image} alt="Intro" />
        </div>
        <div class="intro__content">
          <h1>{introSection.title}</h1>
          <p>{introSection.description}</p>
        </div>
      </div>

      <!-- 年份內容頁面 -->
      {
        sections.map((section) => (
          <div
            id={section.id}
            class="section section--content"
            data-year={section.year}
            style={
              section.gradient
                ? `background: linear-gradient(to right, ${section.gradient.from}, ${section.gradient.to})`
                : section.backgroundColor
                  ? `background-color: ${section.backgroundColor}`
                  : ''
            }>
            <div class="year__column">
              <div class="year__container">
                {section.years.map((year) => (
                  <div
                    class={`year__display ${
                      year === section.activeYear ? 'year__display--active' : ''
                    }`}>
                    {year}
                  </div>
                ))}
              </div>
            </div>
            <div class="content__column">
              <h2>{section.title}</h2>
              <p>{section.description}</p>
              <div class="content__image">
                <img src={section.image} alt={section.title} />
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<style lang="scss">
  .horizontal-scroll {
    &__wrapper {
      position: relative;
      width: 100%;
      overflow: hidden;
    }

    &__container {
      height: 100vh;
      width: 100%;
      overflow: hidden;
    }

    &__sections {
      display: flex;
      height: 100vh;
      width: calc(100vw * var(--section-count, 5));
      will-change: transform;
    }
  }

  .section {
    position: relative;
    width: 100vw;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-shrink: 0;

    &--intro {
      display: grid;
      grid-template-columns: 1fr 1fr;
    }

    &--content {
      display: grid;
      grid-template-columns: 1fr 1fr;
    }
  }

  .intro {
    &__content {
      display: flex;
      flex-direction: column;
      justify-content: center;
      width: 100%;
      height: 100%;
      box-shadow: -280px -20px 90px rgba(0, 0, 0, 0.9);
      background: linear-gradient(
        to right,
        rgba(0, 0, 0, 0.8) 65%,
        rgba(#a88b49, 1) 100%
      );
      h1 {
        color: #fff;
        font-size: 3.5rem;
        margin-bottom: 1.5rem;
      }

      p {
        color: #fff;
        font-size: 1.5rem;
        line-height: 1.6;
      }
    }

    &__image {
      width: 100%;
      height: 100%;
      overflow: hidden;
      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: -560px;
      }
    }
  }

  .year {
    &__column {
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 2rem;
    }

    &__container {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }

    &__display {
      font-size: 2.5rem;
      font-weight: bold;
      transition: all 0.3s ease;
      opacity: 0.5;

      &--active {
        font-size: 6rem;
        opacity: 1;
        color: #fff;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
      }
    }
  }

  .content {
    &__column {
      padding: 2rem;
      display: flex;
      flex-direction: column;
      gap: 2rem;

      h2 {
        font-size: 2.5rem;
        margin-bottom: 1rem;
      }

      p {
        font-size: 1.2rem;
        line-height: 1.6;
      }
    }

    &__image {
      width: 100%;
      height: 400px;
      overflow: hidden;

      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    }
  }

  .year-indicator {
    position: fixed;
    top: 2rem;
    left: 2rem;
    z-index: 100;
    font-weight: bold;
    font-size: 5rem;
    opacity: 0.8;

    &--current {
      transition: all 0.3s ease;
    }
  }
</style>

<script>
  // 直接嵌入腳本確保它在組件被渲染時執行
  document.addEventListener('DOMContentLoaded', () => {
    initHorizontalScroll()
  })

  // 如果頁面已經加載完畢，直接初始化
  if (
    document.readyState === 'complete' ||
    document.readyState === 'interactive'
  ) {
    setTimeout(initHorizontalScroll, 1)
  }

  function initHorizontalScroll() {
    // 檢查GSAP是否加載
    if (typeof gsap === 'undefined' || typeof ScrollTrigger === 'undefined') {
      console.error('GSAP或ScrollTrigger未加載！')

      // 動態加載GSAP和ScrollTrigger
      const loadGSAP = () => {
        const gsapScript = document.createElement('script')
        gsapScript.src =
          'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.3/gsap.min.js'
        gsapScript.onload = loadScrollTrigger
        document.head.appendChild(gsapScript)
      }

      const loadScrollTrigger = () => {
        const stScript = document.createElement('script')
        stScript.src =
          'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.3/ScrollTrigger.min.js'
        stScript.onload = setupAnimation
        document.head.appendChild(stScript)
      }

      loadGSAP()
      return
    }

    setupAnimation()
  }

  function setupAnimation() {
    // 確保GSAP已可用
    if (typeof gsap === 'undefined' || typeof ScrollTrigger === 'undefined') {
      console.error('GSAP仍未加載，無法設置動畫')
      return
    }

    gsap.registerPlugin(ScrollTrigger)

    const wrapper = document.querySelector('.horizontal-scroll__wrapper')
    const container = wrapper.querySelector('.horizontal-scroll__sections')
    const sections = wrapper.querySelectorAll('.section')
    const yearDisplay = wrapper.querySelector('.year-indicator--current')

    // 設置CSS變量
    container.style.setProperty('--section-count', sections.length)

    // 創建橫向滾動動畫
    const scrollTween = gsap.to(container, {
      x: () => -(container.scrollWidth - window.innerWidth),
      ease: 'none',
      scrollTrigger: {
        trigger: wrapper,
        start: 'top top',
        end: () => `+=${container.scrollWidth - window.innerWidth}`,
        pin: true,
        anticipatePin: 1,
        scrub: 1,
        invalidateOnRefresh: true,
        onUpdate: (self) => updateYear(self.progress),
      },
    })

    // 年份更新函數
    function updateYear(progress) {
      // 根據滾動進度確定當前是哪個部分
      const sectionIndex = Math.min(
        Math.floor(progress * sections.length),
        sections.length - 1
      )

      if (sectionIndex >= 0) {
        const currentSection = sections[sectionIndex]
        const year = currentSection.getAttribute('data-year')

        if (year && yearDisplay) {
          // 設置年份並添加動畫效果
          yearDisplay.textContent = year
          gsap.fromTo(
            yearDisplay,
            { scale: 0.8, opacity: 0.5 },
            { scale: 1, opacity: 1, duration: 0.3 }
          )
        }
      }
    }

    // 初始更新年份
    updateYear(0)

    // 窗口大小調整時重新計算
    window.addEventListener('resize', () => {
      ScrollTrigger.refresh()
    })
  }
</script>
